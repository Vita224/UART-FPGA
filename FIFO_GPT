module fifo #(parameter DATA_WIDTH = 8, ADDR_WIDTH = 2)(
    input logic clk, reset,
    input logic rd, wr,
    input logic [DATA_WIDTH-1:0] w_data,
    output logic empty, full,
    output logic [DATA_WIDTH-1:0] r_data
    );
    
    // Internal parameters
    parameter ADDR_BITS = $clog2(2**ADDR_WIDTH);
    parameter ADDR_MAX = 2**ADDR_WIDTH - 1;
    
    // Registers
    logic [DATA_WIDTH-1:0] mem [0:ADDR_MAX];
    logic [$clog2(ADDR_WIDTH):0] r_ptr, w_ptr;
    logic [$clog2(ADDR_WIDTH):0] count;
    
    // Internal signals
    logic wr_en, rd_en;
    
    // Full and Empty Flags
    assign full = (count == ADDR_MAX);
    assign empty = (count == 0);
    
    // Write pointer logic
    always_ff @(posedge clk, posedge reset) begin
        if (reset)
            w_ptr <= 0;
        else if (wr_en)
            w_ptr <= w_ptr + 1;
    end
    
    // Read pointer logic
    always_ff @(posedge clk, posedge reset) begin
        if (reset)
            r_ptr <= 0;
        else if (rd_en)
            r_ptr <= r_ptr + 1;
    end
    
    // Count logic
    always_ff @(posedge clk, posedge reset) begin
        if (reset)
            count <= 0;
        else if (wr_en && ~rd_en)
            count <= count + 1;
        else if (rd_en && ~wr_en)
            count <= count - 1;
    end
    
    // Write and Read Enable generation
    assign wr_en = wr & ~full;
    assign rd_en = rd & ~empty;
    
    // Write and Read operations
    always_ff @(posedge clk) begin
        if (wr_en)
            mem[w_ptr] <= w_data;
    end
    
    assign r_data = mem[r_ptr];
    
endmodule
