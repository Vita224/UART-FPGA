chu uart:

module chu_uart #(parameter FIFO_DEPTH_BIT = 8)( //addr bits of FIFO
    input logic clk,
    input logic reset,
    //slot interface
    input logic cs,
    input logic read,
    input logic write,
    input logic [4:0] addr,
    input logic [31:0] wr_data,
    output logic [31:0] rd_data,
    output logic tx,
    input logic rx
    );
    
    //signal declaration
    logic wr_uart, rd_uart, wr_dvsr;
    logic tx_full, rx_empty;
    logic [10:0] dvsr_reg;
    logic [7:0] r_data;
    logic ctrl_reg;
    
    //body
    //instatntiate uart
    uart #(.DBIT(8), .SB_TICK(16), .FIFO_W(FIFO_DEPTH_BIT)) uart_unit
    (.*, .dvsr(dvsr_reg), .w_data(wr_data[7:0]));
    
    //dvsr register
    always_ff @(posedge clk, posedge reset)
        if(reset)
            dvsr_reg <= 0;
        else
            if(wr_dvsr)
                dvsr_reg <= wr_data[10:0];
     
     //decoding logic
     assign wr_dvsr = (write && cs && (addr[1:0]==2'b01));
     assign wr_uart = (write && cs && (addr[1:0]==2'b10));
     assign rd_uart = (write && cs && (addr[1:0]==2'b11));
     //slot read interface
     assign rd_data = {22'h000000, tx_full, rx_empty, r_data};
endmodule


Uart Core parte 1:

#ifndef _UART_CORE_H_INCLUDED
#define _UART_CORE_H_INCLUDED

#include "chu_io_rw.h"
#include "chu_io_map.h"

    class UartCore{
        //register map//
        enum{
            RD_DATA_REG = 0,
            DVSR_REG = 1,
            WR_DATA_REG = 2,
            RM_RD_DATA_REG = 3  //remove data
        };
        
        //mask
        enum {
        TX_FULL_FIELD = 0x00000200,
        RX_EMPT_FIELD = 0x00000100,
        RX_DATA_FIELD = 0x000000ff
        };
        
        public:
        //methods
        UartCore(uint32_t core_base_addr);
        ~UartCore();
        //basic i/o access
        void set_baud_rate(int baud);
        int rx_fifo_empty();
        int tx_fifo_full();
        void tx_byte(uint8t_t byte);
        int rx_byte();
        //display methods
        void disp(char ch);
        void disp(const char *str);
        void disp(int n, int base, int len);
        void disp(int n, int base);
        void disp(int n);
        void disp(double f, int digit);
        void disp(double f);
        
        private:
        uint32_t base_addr;
        int baud_rate;
        void disp_str(const char *str);
        
        };
        
        #endif //_UART_CORE_H_INCLUDED
        
Uart Core parte 2:

UartCore::UartCore(uint32_t core_base_addr){
    base_addr = core_base_addr;
    set_baud_rate(9600);    //default baud rate
}

void UartCore::set_baud_rate(int baud){
    uint32_t dvsr;
    
    dvsr = SYS_CLK_FREQ*1000000 /16/baud-1;
    io_write(base_addr, DVSR_REG, dvsr);
}

int UartCore::rx_fifo_empty(){
    uint32_t rd_word;
    int full;
    
    rd_word = io_red(base_addr, RD_DATA_REG);
    full = (int)(rd_word & TX_FULL_FIELD) >>9;
    return (full);
  }
  
void UartCore::tx_byte(uint8_t byte){
    while(tx_fifo_full()){};    //busy waiting
    io_write(base_addr, WR_DATA_REG, (uint32_t)byte);
}

int UartCore::rx_byte(){
    uint32_t data;
    
    if(rx_fifo_empty())
        return(-1);
    else{
    data = io_read(base_addr, RD_DATA_REG) & RX_DATA_FIELD;
    io_write(base_addr, RM_RD_DATA_REG, 0); //dummy write
    return((int)data);
    }
   }

Uart Core Display:

void UartCore::disp_str(const char *str){
    while((uint8_t)*str){
        tx_byte(str);
        str++;
    }
}

void UartCore::disp(char ch){
    tx_byte(ch);
}

void UartCore::disp(const char *str){
    disp_str(str);
}

void UartCore::disp(int n, int base, int len){
    char buf[33];   //32 bit
    char *str, ch, sign;signedint rem, i;
    unsigned int un;
    
    //error chack
    if (base !=2 && base != 8 && !=16)
        base 10;
    if (len > 32)   //error check
        len = 32;
    //handle neg decimal//
    if (base == 10 && n < 0){
        un = (unsigned) -n;
        sign = ´-´;
     }else{
     un = (unsigned ) n; //interpreted as unsigned for hex/bin conversion
     sign = ´´;
     }
     
     //convert # to string
     str = &buf[33];
     *str = ´\0´;
     i=0;
     do{
        str--;
        rem=un % base;
        un = un / base;
        if(rem < 10)
            ch = (char) rem + ´0´;
        else
            ch = (char) rem - 10 + ´a´;
        *str = ch;
        i++;
    } while (un);
    //attach - sign for neg decimal ##
    if (sign == ´-´){
        str--;
        *str = sign;
        i++;
    }
    
    //pad with blank
    while(i<len){
    str--;
    *str = ´´;
    i++;
    };
    disp_str(str);
   }
   void UartCore::disp(int n, int base){
    disp(n, base, 0);
   }void UartCore::disp(int n){
    disp(n, 10,0);
   }
   void UartCore::disp(double f, int digit){
    doble fa, frac;
    int n, i, i_part;
    
    //obtain absolute value of f
    fa = f;
    if(f<0.0){
        fa=-f;
        disp_str("-");
    }
    //display integer portion
    i_part=(int)fa;
    disp_str(".");
    //display fraction part
    frac = fa - (double) i_part;
    for(n=0;n<digit; n++){
        frac = frac * 10.0;
        i = (int) frac;
        disp(i);
        frac = frac -1;
       }
     }
     void UartCore::disp(double f){
        disp(f, 3);
     }
